%Algoritmo de otimização Differential Evolution
function opt = de(fo,L,U)
    D = length(L);      %Dimensão do problema (número de variáveis)
    NP = 10;           %Número de indivíduos na população (Number Population)
    CR = 0.5;           %Parâmetro de Cruzamento (Crossover Constant  [0,1])
    F = 1;              %Fator de mutação (Factor of Differential Variation [0,2])
    NG = 10;          %Numero de gerações

    fprintf('\nRestrições\n');
    L
    U
    
    fprintf('\nDimensão:\n');
    D
    
    fprintf('\nTamanho da População:\n');
    NP
    
    fprintf('\nParâmetros de Cruzamento e Mutação:\n');   
    [CR F]
    
    %Geração da População Inicial
    for i = 1:NP
        for j = 1:D
            x1(i,j) = abs(U(j))-abs(L(j))+randn()*(floor(rand()*10)); %Distribuição Normal e Desvio Aleatório            
            while (x1(i,j)==0)
                x1(i,j) = abs(U(j))-abs(L(j))+randn()*(floor(rand()*10)); %Distribuição Normal e Desvio Aleatório            
            end
            %aplicando restrições
            if(x1(i,j)>U(j))
                x1(i,j)=U(j);
            elseif(x1(i,j)<L(j))
                x1(i,j)=L(j);
            end
            
        end
        c1(i) = fo(x1(i,:));
    end
    p = x1;
    
    fprintf('\nPopulação  Inicial:\n');
    x1
    
    fprintf('\nCusto da População Inicial:\n');
    c1'
    
    dataPlot = [];
   for g = 1:NG
        for i=1:NP
            %Sorteando indices dos vetores escolhidos aleatoriamente
            a= NP-floor(rand()*(NP-1)); while (a==i) a=NP-floor(rand()*(NP-1)); end;
            b= NP-floor(rand()*(NP-1)); while (b==i || b==a)  b= NP-floor(rand()*(NP-1)); end;
            c= NP-floor(rand()*(NP-1)); while (c==i || c==b || c==a) c= NP-floor(rand()*(NP-1)); end;
            j= D-floor(rand()*D); %Escolhendo uma variável aleatória para a mutação
            %j,a,b,c            
            for k = 1:D                                
                if (rand()<CR || k==D)                    
                    trial(j)=x1(c,j)+F*(x1(a,j)-x1(b,j));
                else
                    trial(j)=x1(i,j);
                end
                r= D-floor(rand()*D);while (r==j) r= D-floor(rand()*D); end;
                j=r;
                %j=mod((j+1),D);%?
            end
            trial;
            %Avaliar a população
            ct = fo(trial);
            if(ct<=c1(i))
                x2(i,:) = trial;
                c1(i) = ct;
            else
                x2(i,:) = x1(i,:);
            end            
        end
        x1 = x2;
        
       fprintf('\nPopulação Atual:\n');
       x1 
       fprintf('\nGeração:\n');
       g
       fprintf('\n------------------------------------------------------------:\n');
       
       %salvando dados
       if isempty(dataPlot)
            dataPlot = [max(c1),min(c1)];
       else
            dataPlot = [dataPlot;max(c1),min(c1)];
       end
        %plotando
	x = 1:1:length(dataPlot(:,1));
	subplot(1,2,1); 
	plot(x,dataPlot(:,2)','b*',x,dataPlot(:,1)','g-')
	subplot(1,2,2); 
	
	[x,y] = meshgrid(min(L):.2:max(U));
        z = x.^2+y.^2;
        surf(x,y,z)               
        text(x1(1),x1(2),'\leftarrow X','HorizontalAlignment','left','FontWeight','bold','Color','b'); 
	pause(.1);
   end
   
   fprintf('\nPopulação Inicial:\n');
   p
   fprintf('\nPopulação Final:\n');
   x1 
   fprintf('\nGeração Final:\n');
   g
   
   for i=1:NP
        if(fo(x1(i,:)) == min(c1))
            opt = x1(i,:);        
        end
   end 
   fprintf('\nSolução Ótima:\n');
   opt
   fprintf('\nCusto Mínimo:\n');
   min(c1)
   subplot(1,2,2); 
   [x,y] = meshgrid(min(L):.2:max(U));
   z = x.^2+y.^2;
   surf(x,y,z)               
   text(opt(1),opt(2),'\leftarrow X Ponto Ótimo','HorizontalAlignment','left','FontWeight','bold','Color','b'); 
   
end
